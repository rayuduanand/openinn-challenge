# Frontend application configuration
replicaCount: 1

image:
  repository: frontend
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 3000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  hosts:
    - host: app.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: frontend-tls
      hosts:
        - app.example.com

resources:
  limits:
    cpu: 300m
    memory: 384Mi
  requests:
    cpu: 100m
    memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: 3000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 3
readinessProbe:
  httpGet:
    path: /
    port: 3000
  initialDelaySeconds: 15
  periodSeconds: 5
  timeoutSeconds: 2

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

volumes: []
# - name: config-volume
#   configMap:
#     name: frontend-config

volumeMounts: []
# - name: config-volume
#   mountPath: "/app/config"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables for the frontend service
env:
  - name: PORT
    value: "3000"
  - name: NODE_ENV
    value: "production"
  - name: BACKEND_URL
    value: "http://{{ .Release.Name }}-backend-service:8080"
  - name: API_TIMEOUT
    value: "5000"
  - name: LOGGING_LEVEL
    value: "info"
